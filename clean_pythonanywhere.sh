#!/bin/bash

# Script de nettoyage PythonAnywhere
# Utilisation: bash clean_pythonanywhere.sh

set -e  # Arr√™ter en cas d'erreur

echo "=== NETTOYAGE PYTHONANYWHERE ==="
echo ""

# Fonction pour afficher les commandes ex√©cut√©es
run_cmd() {
    echo "Ex√©cution: $*"
    "$@" || true  # Continue m√™me en cas d'erreur
    echo ""
}

# 1. D√©sactiver l'environnement virtuel (si activ√©)
echo "1. D√©sactivation de l'environnement virtuel..."
if [ -n "$VIRTUAL_ENV" ]; then
    echo "Environnement virtuel d√©tect√©: $VIRTUAL_ENV"
    deactivate 2>/dev/null || true
fi
echo "‚úì Fait"
echo ""

# 2. Supprimer les environnements virtuels
echo "2. Suppression des environnements virtuels..."
run_cmd rm -rf ~/.virtualenvs/mysite-virtualenv/
run_cmd rm -rf .venv/
run_cmd rm -rf venv/
run_cmd rm -rf env/
echo "‚úì Environnements virtuels supprim√©s"

# 3. Nettoyer les caches pip
echo "3. Nettoyage des caches pip..."
run_cmd pip cache purge
run_cmd python3.10 -m pip cache purge
run_cmd python3 -m pip cache purge
run_cmd rm -rf ~/.cache/pip/
echo "‚úì Caches pip nettoy√©s"

# 4. Supprimer les fichiers Python temporaires
echo "4. Suppression des fichiers Python temporaires..."
run_cmd find . -name "*.pyc" -delete
run_cmd find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
run_cmd find ~ -name "*.pyc" -delete 2>/dev/null
run_cmd find ~ -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
echo "‚úì Fichiers temporaires Python supprim√©s"

# 5. Nettoyer les logs et fichiers temporaires syst√®me
echo "5. Nettoyage des fichiers temporaires syst√®me..."
run_cmd rm -rf /tmp/pip-*
run_cmd rm -rf /tmp/tmp*
run_cmd rm -rf ~/.local/share/Trash/files/* 2>/dev/null
echo "‚úì Fichiers temporaires syst√®me nettoy√©s"

# 6. Nettoyer les packages globaux inutiles (optionnel)
echo "6. Nettoyage des packages globaux (optionnel)..."
echo "Liste des packages install√©s globalement:"
pip list --user 2>/dev/null || echo "Aucun package utilisateur trouv√©"
echo ""

# 7. V√©rifier l'espace disque disponible
echo "7. V√©rification de l'espace disque..."
echo "Espace disque disponible:"
df -h ~ | head -2
echo ""
echo "Utilisation du r√©pertoire home (top 10):"
du -sh ~/* 2>/dev/null | sort -hr | head -10 || echo "Erreur lors du calcul"
echo ""

echo "=== NETTOYAGE TERMIN√â ==="
echo ""
echo "Prochaines √©tapes recommand√©es:"
echo "1. Cr√©er un nouvel environnement virtuel:"
echo "   python3.10 -m venv .venv"
echo ""
echo "2. Activer l'environnement:"
echo "   source .venv/bin/activate"
echo ""
echo "3. Installer les d√©pendances minimales:"
echo "   pip install -r requirements_prod.txt"
echo ""
echo "4. V√©rifier l'installation:"
echo "   pip list"
echo ""

# Optionnel: Recr√©er automatiquement l'environnement
read -p "Voulez-vous recr√©er automatiquement l'environnement virtuel? (y/N): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Cr√©ation de l'environnement virtuel..."
    python3.10 -m venv .venv
    echo "‚úì Environnement virtuel cr√©√©"
    
    echo "Activation de l'environnement..."
    source .venv/bin/activate
    echo "‚úì Environnement activ√©"
    
    if [ -f requirements_prod.txt ]; then
        echo "Installation des d√©pendances..."
        pip install --upgrade pip
        pip install -r requirements_prod.txt
        echo "‚úì D√©pendances install√©es"
        
        echo ""
        echo "=== INSTALLATION TERMIN√âE ==="
        echo "Packages install√©s:"
        pip list
    else
        echo "‚ö†Ô∏è  Fichier requirements_prod.txt non trouv√©"
    fi
fi

echo ""
echo "Script termin√© avec succ√®s! üéâ" 